/*{
  "author": "Glenn M. Lewis",
  "copyright": "Apache-2.0",
  "date": "2019-08-24",
  "irmf": "1.0",
  "materials": ["PLA"],
  "max": [5,5,5],
  "min": [-5,-5,0],
  "notes": "Revolved quadratic Bezier spline.",
  "options": {},
  "title": "Quadratic Bezier",
  "units": "mm",
  "version": "1.0"
}*/

float interpQuadratic(vec2 p0,vec2 p1,vec2 p2,float y){
  float a=p2.y+p0.y-2.*p1.y;
  float b=2.*(p1.y-p0.y);
  float c=p0.y-y;
  if(b*b<4.*a*c){return 0.;}// bad (imaginary) quadratic
  float det=sqrt(b*b-4.*a*c);
  float t=(-b+det)/(2.*a);
  float x=(1.-t)*(1.-t)*p0.x+2.*(1.-t)*t*p1.x+t*t*p2.x;
  return x;
}

float qBezier(vec2 p0,vec2 p1,vec2 p2,in vec3 xyz){
  float r=length(xyz.xy);
  if(r>interpQuadratic(p0,p1,p2,xyz.z)){return 0.;}
  return 1.;
}

void mainModel4(out vec4 materials,in vec3 xyz){
  xyz.z+=1.;
  materials[0]=qBezier(vec2(-2,2),vec2(0,0),vec2(2,2),xyz);
}
