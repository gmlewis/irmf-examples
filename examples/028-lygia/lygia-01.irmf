/*{
  "author": "Glenn M. Lewis",
  "copyright": "Apache-2.0",
  "date": "2022-11-25",
  "irmf": "1.0",
  "materials": ["jasper","sapphire","agate","emerald"],
  "max": [3,3,3],
  "min": [-3,-3,-3],
  "notes": "Simple IRMF shader - lygia-01.",
  "options": {},
  "title": "lygia-01",
  "units": "mm",
  "version": "1.0"
}*/

#define FNC_SATURATE
#include "lygia/sdf.glsl"

float sdf2mat(in float a){
  return smoothstep(.010,.009,a);
}

vec4 sdfs(in vec3 pos){
  vec4 res=vec4(0);
  
  res.x+=sdf2mat(sphereSDF(pos-vec3(0.,.60,0.),.5));
  res.y+=sdf2mat(boxSDF(pos-vec3(2.,.5,0.),vec3(.4)));
  res.z+=sdf2mat(torusSDF(pos-vec3(0.,.5,2.),vec2(.4,.1)));
  res.w+=sdf2mat(capsuleSDF(pos,vec3(-2.3,.4,-.2),vec3(-1.6,.75,.2),.2));
  res.x+=sdf2mat(triPrismSDF(pos-vec3(-2.,.50,-2.),vec2(.5,.1)));
  res.y+=sdf2mat(cylinderSDF(pos-vec3(2.,.50,-2.),vec2(.2,.4)));
  res.z+=sdf2mat(coneSDF(pos-vec3(0.,.75,-2.),vec3(.8,.6,.6)));
  res.w+=sdf2mat(hexPrismSDF(pos-vec3(-2.,.60,2.),vec2(.5,.1)));
  res.x+=sdf2mat(pyramidSDF(pos-vec3(2.,.10,2.),1.));
  
  return res;
}

void mainModel4(out vec4 materials,in vec3 xyz){
  materials=sdfs(xyz);
}
