/*{
  "author": "Glenn M. Lewis",
  "copyright": "Apache-2.0",
  "date": "2022-11-25",
  "irmf": "1.0",
  "materials": ["jasper","sapphire","agate","emerald"],
  "max": [3,3,3],
  "min": [-3,-3,-3],
  "notes": "Simple IRMF shader - lygia-01.",
  "options": {},
  "title": "lygia-01",
  "units": "mm",
  "version": "1.0"
}*/

#define FNC_SATURATE
#include "lygia/sdf.glsl"

float sdf2mat(in float a) {
  return smoothstep(0.010, 0.009, a);
}

vec4 sdfs(in vec3 pos) {
  vec4 res = vec4(0);
  
  res.x += sdf2mat(sphereSDF(pos - vec3(0.0, 0.60, 0.0), 0.5));
  res.y += sdf2mat(boxSDF(pos - vec3(2.0, 0.5, 0.0), vec3(0.4)));
  res.z += sdf2mat(torusSDF(pos - vec3(0.0, 0.5, 2.0), vec2(0.4, 0.1)));
  res.w += sdf2mat(capsuleSDF(pos, vec3(-2.3, 0.4, - 0.2), vec3(-1.6, 0.75, 0.2), 0.2));
  res.x += sdf2mat(triPrismSDF(pos - vec3(-2.0, 0.50, - 2.0), vec2(0.5, 0.1)));
  res.y += sdf2mat(cylinderSDF(pos - vec3(2.0, 0.50, - 2.0), vec2(0.2, 0.4)));
  res.z += sdf2mat(coneSDF(pos - vec3(0.0, 0.75, - 2.0), vec3(0.8, 0.6, 0.6)));
  res.w += sdf2mat(hexPrismSDF(pos - vec3(-2.0, 0.60, 2.0), vec2(0.5, 0.1)));
  res.x += sdf2mat(pyramidSDF(pos - vec3(2.0, 0.10, 2.0), 1.0));
  
  return res;
}

void mainModel4(out vec4 materials, in vec3 xyz) {
  materials = sdfs(xyz);
}
